Summy

功能描述

Summy是一個Chrome擴充功能，透過使用OpenAI的/v1/chat/completions端點來進行聊天和內容生成。除此之外，這個外掛還有另一個主要功能：可以針對目前活動頁面進行摘要，使用者需要按一下摘要鈕才會進行摘要。

主要功能

聊天功能: Summy提供聊天功能，允許使用者與AI直接對話。
內容生成: Summy可以自動生成內容，基於使用者輸入的提示。
頁面摘要: Summy可以針對目前活動頁面進行摘要，但是需要使用者按一下摘要鈕才會進行摘要。
設定頁面: Summy提供設定頁面，允許使用者設定API網址和金鑰。
工作流程

使用者安裝Summy擴充功能。
使用者輸入提示，Summy會將其送往OpenAI的/v1/chat/completions端點。
OpenAI的API會根據提示生成回應，並將其返回給Summy。
Summy會顯示回應給使用者。
使用者可以繼續輸入提示，Summy會再次將其送往OpenAI的/v1/chat/completions端點。
當使用者按一下摘要鈕時，Summy會對目前網頁進行取樣。
取樣的網頁內容會被送往OpenAI的API進行摘要。
OpenAI的API會根據網頁內容生成摘要內容，並將其返回給Summy。
Summy程式會將摘要內容插入到聊天紀錄中，以作為對話的一部分。
設定頁面

設定頁面允許使用者設定以下資訊：

API網址：OpenAI的API網址
API金鑰：OpenAI的API金鑰
聊天紀錄

聊天紀錄會顯示在側欄中，包含了以下內容：

使用者輸入的提示
AI的回應
摘要內容（來自使用者按下摘要鈕後，Summy對網頁進行取樣並由AI進行摘要後的結果）

html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
        }
        #sidebar {
            width: 300px;
            background-color: #f4f4f4;
            padding: 20px;
            overflow-y: auto;
        }
        #chat-container {
            flex-grow: 1;
            padding: 20px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            position: fixed;
            bottom: 0;
            left: 300px;
            right: 0;
            background-color: #fff;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
            display: flex;
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com/v1/chat/completions"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰">
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script>
        document.getElementById('send-button').addEventListener('click', sendMessage);
        document.getElementById('summarize-button').addEventListener('click', summarizePage);

        function sendMessage() {
            const userInput = document.getElementById('user-input').value;
            if (userInput.trim() === '') return;

            appendMessage(userInput, 'user');
            document.getElementById('user-input').value = '';

            fetchResponse(userInput).then(response => {
                appendMessage(response, 'ai');
            });
        }

        function summarizePage() {
            const pageContent = document.body.innerText;
            if (pageContent.trim() === '') return;

            fetchSummary(pageContent).then(summary => {
                appendMessage(summary, 'summary');
            });
        }

        function appendMessage(message, type) {
            const chatHistory = document.getElementById('chat-history');
            const messageElement = document.createElement('div');
            messageElement.className = `message ${type}-message`;
            messageElement.textContent = message;
            chatHistory.appendChild(messageElement);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        async function fetchResponse(prompt) {
            const apiUrl = document.getElementById('api-url').value;
            const apiKey = document.getElementById('api-key').value;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    messages: [{ role: "user", content: prompt }]
                })
            });

            const data = await response.json();
            return data.choices[0].message.content;
        }

        async function fetchSummary(content) {
            const apiUrl = document.getElementById('api-url').value;
            const apiKey = document.getElementById('api-key').value;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    messages: [{ role: "user", content: `請對以下內容進行摘要：${content}` }]
                })
            });

            const data = await response.json();
            return data.choices[0].message.content;
        }
    </script>
</body>
</html>

修改:
1.API網址改為自動為輸入的網址加上/v1/chat/completions
2.網址與金鑰的下方加上一個下拉選單 內容來自 API 網址加上 /models 的回覆內容 將回覆內容的模型名稱製成列表供選擇
3.在網址與金鑰文字框捕捉貼上以及打字動作 當發生時 檢查網址與金鑰是否都有填入文字 若有則自動執行模型列表索取以及建立


html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
        }
        #sidebar {
            width: 300px;
            background-color: #f4f4f4;
            padding: 20px;
            overflow-y: auto;
        }
        #chat-container {
            flex-grow: 1;
            padding: 20px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            position: fixed;
            bottom: 0;
            left: 300px;
            right: 0;
            background-color: #fff;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
            display: flex;
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰"><br><br>
        <label for="model-select">選擇模型:</label>
        <select id="model-select" disabled>
            <option value="">載入中...</option>
        </select>
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script>
        document.getElementById('send-button').addEventListener('click', sendMessage);
        document.getElementById('summarize-button').addEventListener('click', summarizePage);
        document.getElementById('api-url').addEventListener('input', checkInputs);
        document.getElementById('api-key').addEventListener('input', checkInputs);
        document.getElementById('api-url').addEventListener('paste', checkInputs);
        document.getElementById('api-key').addEventListener('paste', checkInputs);

        function sendMessage() {
            const userInput = document.getElementById('user-input').value;
            if (userInput.trim() === '') return;

            appendMessage(userInput, 'user');
            document.getElementById('user-input').value = '';

            fetchResponse(userInput).then(response => {
                appendMessage(response, 'ai');
            });
        }

        function summarizePage() {
            const pageContent = document.body.innerText;
            if (pageContent.trim() === '') return;

            fetchSummary(pageContent).then(summary => {
                appendMessage(summary, 'summary');
            });
        }

        function appendMessage(message, type) {
            const chatHistory = document.getElementById('chat-history');
            const messageElement = document.createElement('div');
            messageElement.className = `message ${type}-message`;
            messageElement.textContent = message;
            chatHistory.appendChild(messageElement);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        async function fetchResponse(prompt) {
            const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
            const apiKey = document.getElementById('api-key').value;
            const model = document.getElementById('model-select').value;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: model,
                    messages: [{ role: "user", content: prompt }]
                })
            });

            const data = await response.json();
            return data.choices[0].message.content;
        }

        async function fetchSummary(content) {
            const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
            const apiKey = document.getElementById('api-key').value;
            const model = document.getElementById('model-select').value;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: model,
                    messages: [{ role: "user", content: `請對以下內容進行摘要：${content}` }]
                })
            });

            const data = await response.json();
            return data.choices[0].message.content;
        }

        function checkInputs() {
            const apiUrl = document.getElementById('api-url').value.trim();
            const apiKey = document.getElementById('api-key').value.trim();

            if (apiUrl && apiKey) {
                fetchModels(apiUrl, apiKey);
            } else {
                document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
                document.getElementById('model-select').disabled = true;
            }
        }

        async function fetchModels(apiUrl, apiKey) {
            const modelsUrl = apiUrl + '/v1/models';
            try {
                const response = await fetch(modelsUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${apiKey}`
                    }
                });

                const data = await response.json();
                populateModelSelect(data.data);
            } catch (error) {
                document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
                console.error('Error fetching models:', error);
            }
        }

        function populateModelSelect(models) {
            const selectElement = document.getElementById('model-select');
            selectElement.innerHTML = '';
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.id;
                option.textContent = model.id;
                selectElement.appendChild(option);
            });
            selectElement.disabled = false;
        }
    </script>
</body>
</html>

對話送出時 要將對話歷史紀錄都作為context


html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
        }
        #sidebar {
            width: 300px;
            background-color: #f4f4f4;
            padding: 20px;
            overflow-y: auto;
        }
        #chat-container {
            flex-grow: 1;
            padding: 20px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            position: fixed;
            bottom: 0;
            left: 300px;
            right: 0;
            background-color: #fff;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
            display: flex;
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰"><br><br>
        <label for="model-select">選擇模型:</label>
        <select id="model-select" disabled>
            <option value="">載入中...</option>
        </select>
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script>
        document.getElementById('send-button').addEventListener('click', sendMessage);
        document.getElementById('summarize-button').addEventListener('click', summarizePage);
        document.getElementById('api-url').addEventListener('input', checkInputs);
        document.getElementById('api-key').addEventListener('input', checkInputs);
        document.getElementById('api-url').addEventListener('paste', checkInputs);
        document.getElementById('api-key').addEventListener('paste', checkInputs);

        let chatHistory = [];

        function sendMessage() {
            const userInput = document.getElementById('user-input').value;
            if (userInput.trim() === '') return;

            appendMessage(userInput, 'user');
            document.getElementById('user-input').value = '';

            chatHistory.push({ role: "user", content: userInput });

            fetchResponse().then(response => {
                appendMessage(response, 'ai');
                chatHistory.push({ role: "assistant", content: response });
            });
        }

        function summarizePage() {
            const pageContent = document.body.innerText;
            if (pageContent.trim() === '') return;

            fetchSummary(pageContent).then(summary => {
                appendMessage(summary, 'summary');
                chatHistory.push({ role: "assistant", content: summary });
            });
        }

        function appendMessage(message, type) {
            const chatHistoryDiv = document.getElementById('chat-history');
            const messageElement = document.createElement('div');
            messageElement.className = `message ${type}-message`;
            messageElement.textContent = message;
            chatHistoryDiv.appendChild(messageElement);
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
        }

        async function fetchResponse() {
            const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
            const apiKey = document.getElementById('api-key').value;
            const model = document.getElementById('model-select').value;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: model,
                    messages: chatHistory
                })
            });

            const data = await response.json();
            return data.choices[0].message.content;
        }

        async function fetchSummary(content) {
            const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
            const apiKey = document.getElementById('api-key').value;
            const model = document.getElementById('model-select').value;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: model,
                    messages: [...chatHistory, { role: "user", content: `請對以下內容進行摘要：${content}` }]
                })
            });

            const data = await response.json();
            return data.choices[0].message.content;
        }

        function checkInputs() {
            const apiUrl = document.getElementById('api-url').value.trim();
            const apiKey = document.getElementById('api-key').value.trim();

            if (apiUrl && apiKey) {
                fetchModels(apiUrl, apiKey);
            } else {
                document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
                document.getElementById('model-select').disabled = true;
            }
        }

        async function fetchModels(apiUrl, apiKey) {
            const modelsUrl = apiUrl + '/v1/models';
            try {
                const response = await fetch(modelsUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${apiKey}`
                    }
                });

                const data = await response.json();
                populateModelSelect(data.data);
            } catch (error) {
                document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
                console.error('Error fetching models:', error);
            }
        }

        function populateModelSelect(models) {
            const selectElement = document.getElementById('model-select');
            selectElement.innerHTML = '';
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.id;
                option.textContent = model.id;
                selectElement.appendChild(option);
            });
            selectElement.disabled = false;
        }
    </script>
</body>
</html>

將程式改寫成chrome外掛 manifestV3版


Creating a Chrome extension using Manifest V3 involves structuring your project with specific files such as manifest.json, background.js, popup.html, and popup.js. Below is a complete example of how you can structure your Summy Chrome extension:

manifest.json
This file describes the extension and its capabilities.

json
{
  "manifest_version": 3,
  "name": "Summy",
  "version": "1.0",
  "description": "A Chrome extension that uses OpenAI's API to chat, generate content, and summarize the current webpage.",
  "permissions": [
    "activeTab",
    "storage"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  }
}
popup.html
This file contains the HTML for the popup UI of the extension.

html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 400px;
            width: 300px;
        }
        #sidebar {
            width: 100%;
            background-color: #f4f4f4;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }
        #chat-container {
            flex-grow: 1;
            padding: 10px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            display: flex;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰"><br><br>
        <label for="model-select">選擇模型:</label>
        <select id="model-select" disabled>
            <option value="">載入中...</option>
        </select>
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script src="popup.js"></script>
</body>
</html>
popup.js
This file contains the JavaScript logic for the popup UI.

javascript
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('summarize-button').addEventListener('click', summarizePage);
    document.getElementById('api-url').addEventListener('input', checkInputs);
    document.getElementById('api-key').addEventListener('input', checkInputs);
    document.getElementById('api-url').addEventListener('paste', checkInputs);
    document.getElementById('api-key').addEventListener('paste', checkInputs);

    loadSettings();
});

let chatHistory = [];

async function sendMessage() {
    const userInput = document.getElementById('user-input').value;
    if (userInput.trim() === '') return;

    appendMessage(userInput, 'user');
    document.getElementById('user-input').value = '';

    chatHistory.push({ role: "user", content: userInput });

    const response = await fetchResponse();
    appendMessage(response, 'ai');
    chatHistory.push({ role: "assistant", content: response });
}

async function summarizePage() {
    const pageContent = document.body.innerText;
    if (pageContent.trim() === '') return;

    const summary = await fetchSummary(pageContent);
    appendMessage(summary, 'summary');
    chatHistory.push({ role: "assistant", content: summary });
}

function appendMessage(message, type) {
    const chatHistoryDiv = document.getElementById('chat-history');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}-message`;
    messageElement.textContent = message;
    chatHistoryDiv.appendChild(messageElement);
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
}

async function fetchResponse() {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: chatHistory
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

async function fetchSummary(content) {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [...chatHistory, { role: "user", content: `請對以下內容進行摘要：${content}` }]
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

function checkInputs() {
    const apiUrl = document.getElementById('api-url').value.trim();
    const apiKey = document.getElementById('api-key').value.trim();

    if (apiUrl && apiKey) {
        fetchModels(apiUrl, apiKey);
        saveSettings(apiUrl, apiKey);
    } else {
        document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
        document.getElementById('model-select').disabled = true;
    }
}

async function fetchModels(apiUrl, apiKey) {
    const modelsUrl = apiUrl + '/v1/models';
    try {
        const response = await fetch(modelsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        const data = await response.json();
        populateModelSelect(data.data);
    } catch (error) {
        document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
        console.error('Error fetching models:', error);
    }
}

function populateModelSelect(models) {
    const selectElement = document.getElementById('model-select');
    selectElement.innerHTML = '';
    models.forEach(model => {
        const option = document.createElement('option');
        option.value = model.id;
        option.textContent = model.id;
        selectElement.appendChild(option);
    });
    selectElement.disabled = false;
}

async function loadSettings() {
    const settings = await chrome.storage.local.get(['apiUrl', 'apiKey']);
    if (settings.apiUrl && settings.apiKey) {
        document.getElementById('api-url').value = settings.apiUrl;
        document.getElementById('api-key').value = settings.apiKey;
        fetchModels(settings.apiUrl, settings.apiKey);
    }
}

function saveSettings(apiUrl, apiKey) {
    chrome.storage.local.set({ apiUrl, apiKey });
}
icons/
Create a folder named icons and add icon images (icon16.png, icon48.png, icon128.png) to this folder. These icons will be used in the Chrome toolbar and extension store.

background.js
For this simple extension, the background.js file can be empty or contain basic service worker logic if needed.

javascript
// background.js
chrome.runtime.onInstalled.addListener(() => {
    console.log("Summy extension installed.");
});
Folder Structure
Your project should look like this:

code
summy-extension/
├── manifest.json
├── popup.html
├── popup.js
├── background.js
└── icons/
    ├── icon16.png
    ├── icon48.png
    └── icon128.png
To load this extension into Chrome, follow these steps:

Open Chrome and go to chrome://extensions/.
Enable "Developer mode" using the toggle switch in the top right corner.
Click on "Load unpacked" and select the summy-extension folder.
This will install your Summy extension into Chrome. Make sure to replace the icon files with actual images of the appropriate sizes.


將需要摘要的網頁來源 改為目前動作的網頁


To modify the Summy Chrome extension so that it summarizes the currently active webpage, you need to use the chrome.tabs API to fetch the content of the active tab. Here's the updated code:

manifest.json
No changes are needed here for this specific modification.

json
{
  "manifest_version": 3,
  "name": "Summy",
  "version": "1.0",
  "description": "A Chrome extension that uses OpenAI's API to chat, generate content, and summarize the current webpage.",
  "permissions": [
    "activeTab",
    "storage"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  }
}
popup.html
No changes are needed here for this specific modification.

html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 400px;
            width: 300px;
        }
        #sidebar {
            width: 100%;
            background-color: #f4f4f4;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }
        #chat-container {
            flex-grow: 1;
            padding: 10px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            display: flex;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰"><br><br>
        <label for="model-select">選擇模型:</label>
        <select id="model-select" disabled>
            <option value="">載入中...</option>
        </select>
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script src="popup.js"></script>
</body>
</html>
popup.js
Update the summarizePage function to fetch the content of the active tab.

javascript
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('summarize-button').addEventListener('click', summarizePage);
    document.getElementById('api-url').addEventListener('input', checkInputs);
    document.getElementById('api-key').addEventListener('input', checkInputs);
    document.getElementById('api-url').addEventListener('paste', checkInputs);
    document.getElementById('api-key').addEventListener('paste', checkInputs);

    loadSettings();
});

let chatHistory = [];

async function sendMessage() {
    const userInput = document.getElementById('user-input').value;
    if (userInput.trim() === '') return;

    appendMessage(userInput, 'user');
    document.getElementById('user-input').value = '';

    chatHistory.push({ role: "user", content: userInput });

    const response = await fetchResponse();
    appendMessage(response, 'ai');
    chatHistory.push({ role: "assistant", content: response });
}

async function summarizePage() {
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    const pageContent = await fetchPageContent(tab.id);

    if (pageContent.trim() === '') return;

    const summary = await fetchSummary(pageContent);
    appendMessage(summary, 'summary');
    chatHistory.push({ role: "assistant", content: summary });
}

async function fetchPageContent(tabId) {
    return new Promise((resolve) => {
        chrome.scripting.executeScript({
            target: { tabId: tabId },
            func: () => document.body.innerText
        }, (results) => {
            resolve(results[0].result);
        });
    });
}

function appendMessage(message, type) {
    const chatHistoryDiv = document.getElementById('chat-history');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}-message`;
    messageElement.textContent = message;
    chatHistoryDiv.appendChild(messageElement);
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
}

async function fetchResponse() {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: chatHistory
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

async function fetchSummary(content) {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [...chatHistory, { role: "user", content: `請對以下內容進行摘要：${content}` }]
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

function checkInputs() {
    const apiUrl = document.getElementById('api-url').value.trim();
    const apiKey = document.getElementById('api-key').value.trim();

    if (apiUrl && apiKey) {
        fetchModels(apiUrl, apiKey);
        saveSettings(apiUrl, apiKey);
    } else {
        document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
        document.getElementById('model-select').disabled = true;
    }
}

async function fetchModels(apiUrl, apiKey) {
    const modelsUrl = apiUrl + '/v1/models';
    try {
        const response = await fetch(modelsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        const data = await response.json();
        populateModelSelect(data.data);
    } catch (error) {
        document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
        console.error('Error fetching models:', error);
    }
}

function populateModelSelect(models) {
    const selectElement = document.getElementById('model-select');
    selectElement.innerHTML = '';
    models.forEach(model => {
        const option = document.createElement('option');
        option.value = model.id;
        option.textContent = model.id;
        selectElement.appendChild(option);
    });
    selectElement.disabled = false;
}

async function loadSettings() {
    const settings = await chrome.storage.local.get(['apiUrl', 'apiKey']);
    if (settings.apiUrl && settings.apiKey) {
        document.getElementById('api-url').value = settings.apiUrl;
        document.getElementById('api-key').value = settings.apiKey;
        fetchModels(settings.apiUrl, settings.apiKey);
    }
}

function saveSettings(apiUrl, apiKey) {
    chrome.storage.local.set({ apiUrl, apiKey });
}
background.js
No changes are needed here for this specific modification.

javascript
// background.js
chrome.runtime.onInstalled.addListener(() => {
    console.log("Summy extension installed.");
});
Folder Structure
Your project should look like this:

code
summy-extension/
├── manifest.json
├── popup.html
├── popup.js
├── background.js
└── icons/
    ├── icon16.png
    ├── icon48.png
    └── icon128.png
To load this extension into Chrome, follow these steps:

Open Chrome and go to chrome://extensions/.
Enable "Developer mode" using the toggle switch in the top right corner.
Click on "Load unpacked" and select the summy-extension folder.
This will install your Summy extension into Chrome. Make sure to replace the icon files with actual images of the appropriate sizes. The summarizePage function now fetches the content of the currently active tab and sends it to OpenAI for summarization.


出現錯誤
popup.js:41 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'executeScript')
at popup.js:41:26
at new Promise ()
at fetchPageContent (popup.js:40:12)
at HTMLButtonElement.summarizePage (popup.js:30:31)


The error you're encountering is due to the fact that the chrome.scripting.executeScript API is not available in the context of the popup script in Manifest V3. Instead, you should use the chrome.tabs.executeScript API, which is the correct method for executing scripts in the context of a tab.

Here's the corrected popup.js file with the necessary changes:

popup.js
Update the fetchPageContent function to use chrome.tabs.executeScript.

javascript
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('summarize-button').addEventListener('click', summarizePage);
    document.getElementById('api-url').addEventListener('input', checkInputs);
    document.getElementById('api-key').addEventListener('input', checkInputs);
    document.getElementById('api-url').addEventListener('paste', checkInputs);
    document.getElementById('api-key').addEventListener('paste', checkInputs);

    loadSettings();
});

let chatHistory = [];

async function sendMessage() {
    const userInput = document.getElementById('user-input').value;
    if (userInput.trim() === '') return;

    appendMessage(userInput, 'user');
    document.getElementById('user-input').value = '';

    chatHistory.push({ role: "user", content: userInput });

    const response = await fetchResponse();
    appendMessage(response, 'ai');
    chatHistory.push({ role: "assistant", content: response });
}

async function summarizePage() {
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    const pageContent = await fetchPageContent(tab.id);

    if (pageContent.trim() === '') return;

    const summary = await fetchSummary(pageContent);
    appendMessage(summary, 'summary');
    chatHistory.push({ role: "assistant", content: summary });
}

async function fetchPageContent(tabId) {
    return new Promise((resolve, reject) => {
        chrome.tabs.executeScript(tabId, {
            code: 'document.body.innerText'
        }, (results) => {
            if (chrome.runtime.lastError) {
                reject(chrome.runtime.lastError);
            } else {
                resolve(results[0]);
            }
        });
    });
}

function appendMessage(message, type) {
    const chatHistoryDiv = document.getElementById('chat-history');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}-message`;
    messageElement.textContent = message;
    chatHistoryDiv.appendChild(messageElement);
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
}

async function fetchResponse() {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: chatHistory
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

async function fetchSummary(content) {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [...chatHistory, { role: "user", content: `請對以下內容進行摘要：${content}` }]
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

function checkInputs() {
    const apiUrl = document.getElementById('api-url').value.trim();
    const apiKey = document.getElementById('api-key').value.trim();

    if (apiUrl && apiKey) {
        fetchModels(apiUrl, apiKey);
        saveSettings(apiUrl, apiKey);
    } else {
        document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
        document.getElementById('model-select').disabled = true;
    }
}

async function fetchModels(apiUrl, apiKey) {
    const modelsUrl = apiUrl + '/v1/models';
    try {
        const response = await fetch(modelsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        const data = await response.json();
        populateModelSelect(data.data);
    } catch (error) {
        document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
        console.error('Error fetching models:', error);
    }
}

function populateModelSelect(models) {
    const selectElement = document.getElementById('model-select');
    selectElement.innerHTML = '';
    models.forEach(model => {
        const option = document.createElement('option');
        option.value = model.id;
        option.textContent = model.id;
        selectElement.appendChild(option);
    });
    selectElement.disabled = false;
}

async function loadSettings() {
    const settings = await chrome.storage.local.get(['apiUrl', 'apiKey']);
    if (settings.apiUrl && settings.apiKey) {
        document.getElementById('api-url').value = settings.apiUrl;
        document.getElementById('api-key').value = settings.apiKey;
        fetchModels(settings.apiUrl, settings.apiKey);
    }
}

function saveSettings(apiUrl, apiKey) {
    chrome.storage.local.set({ apiUrl, apiKey });
}
Explanation of Changes
fetchPageContent Function: Updated to use chrome.tabs.executeScript instead of chrome.scripting.executeScript.
Error Handling: Added error handling to check for chrome.runtime.lastError when executing the script in the tab.
This should resolve the error and allow the extension to correctly fetch the content of the active tab and summarize it. Make sure to reload the extension in Chrome after making these changes.


出現錯誤
popup.js:41 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'executeScript')
at popup.js:41:26
at new Promise ()
at fetchPageContent (popup.js:40:12)
at HTMLButtonElement.summarizePage (popup.js:30:31)

﻿還是有錯誤
Uncaught (in promise) TypeError: chrome.tabs.executeScript is not a function
at popup.js:41:21
at new Promise ()
at fetchPageContent (popup.js:40:12)
at HTMLButtonElement.summarizePage (popup.js:30:31)


The error you're encountering suggests that the chrome.tabs.executeScript function is not available in the context where you're trying to use it. This can happen if the necessary permissions or APIs are not properly declared in the manifest.json file or if there are issues with the way the script is being executed.

Let's ensure that everything is set up correctly:

Manifest File (manifest.json): Ensure that the activeTab permission is included, which allows the extension to execute scripts in the active tab.

Permissions: Make sure that the activeTab permission is correctly specified in the manifest.json.

Background Script: Ensure that the background script is correctly set up and has the necessary permissions.

Here is the corrected and complete setup for your Chrome extension:

manifest.json
Ensure the activeTab permission is included.

json
{
  "manifest_version": 3,
  "name": "Summy",
  "version": "1.0",
  "description": "A Chrome extension that uses OpenAI's API to chat, generate content, and summarize the current webpage.",
  "permissions": [
    "activeTab",
    "storage"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  }
}
popup.html
No changes are needed here for this specific modification.

html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 400px;
            width: 300px;
        }
        #sidebar {
            width: 100%;
            background-color: #f4f4f4;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }
        #chat-container {
            flex-grow: 1;
            padding: 10px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            display: flex;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰"><br><br>
        <label for="model-select">選擇模型:</label>
        <select id="model-select" disabled>
            <option value="">載入中...</option>
        </select>
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script src="popup.js"></script>
</body>
</html>
popup.js
Update the fetchPageContent function to use chrome.tabs.executeScript.

javascript
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('summarize-button').addEventListener('click', summarizePage);
    document.getElementById('api-url').addEventListener('input', checkInputs);
    document.getElementById('api-key').addEventListener('input', checkInputs);
    document.getElementById('api-url').addEventListener('paste', checkInputs);
    document.getElementById('api-key').addEventListener('paste', checkInputs);

    loadSettings();
});

let chatHistory = [];

async function sendMessage() {
    const userInput = document.getElementById('user-input').value;
    if (userInput.trim() === '') return;

    appendMessage(userInput, 'user');
    document.getElementById('user-input').value = '';

    chatHistory.push({ role: "user", content: userInput });

    const response = await fetchResponse();
    appendMessage(response, 'ai');
    chatHistory.push({ role: "assistant", content: response });
}

async function summarizePage() {
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    const pageContent = await fetchPageContent(tab.id);

    if (pageContent.trim() === '') return;

    const summary = await fetchSummary(pageContent);
    appendMessage(summary, 'summary');
    chatHistory.push({ role: "assistant", content: summary });
}

async function fetchPageContent(tabId) {
    return new Promise((resolve, reject) => {
        chrome.tabs.executeScript(tabId, {
            code: 'document.body.innerText'
        }, (results) => {
            if (chrome.runtime.lastError) {
                reject(chrome.runtime.lastError);
            } else {
                resolve(results[0]);
            }
        });
    });
}

function appendMessage(message, type) {
    const chatHistoryDiv = document.getElementById('chat-history');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}-message`;
    messageElement.textContent = message;
    chatHistoryDiv.appendChild(messageElement);
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
}

async function fetchResponse() {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: chatHistory
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

async function fetchSummary(content) {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [...chatHistory, { role: "user", content: `請對以下內容進行摘要：${content}` }]
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

function checkInputs() {
    const apiUrl = document.getElementById('api-url').value.trim();
    const apiKey = document.getElementById('api-key').value.trim();

    if (apiUrl && apiKey) {
        fetchModels(apiUrl, apiKey);
        saveSettings(apiUrl, apiKey);
    } else {
        document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
        document.getElementById('model-select').disabled = true;
    }
}

async function fetchModels(apiUrl, apiKey) {
    const modelsUrl = apiUrl + '/v1/models';
    try {
        const response = await fetch(modelsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        const data = await response.json();
        populateModelSelect(data.data);
    } catch (error) {
        document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
        console.error('Error fetching models:', error);
    }
}

function populateModelSelect(models) {
    const selectElement = document.getElementById('model-select');
    selectElement.innerHTML = '';
    models.forEach(model => {
        const option = document.createElement('option');
        option.value = model.id;
        option.textContent = model.id;
        selectElement.appendChild(option);
    });
    selectElement.disabled = false;
}

async function loadSettings() {
    const settings = await chrome.storage.local.get(['apiUrl', 'apiKey']);
    if (settings.apiUrl && settings.apiKey) {
        document.getElementById('api-url').value = settings.apiUrl;
        document.getElementById('api-key').value = settings.apiKey;
        fetchModels(settings.apiUrl, settings.apiKey);
    }
}

function saveSettings(apiUrl, apiKey) {
    chrome.storage.local.set({ apiUrl, apiKey });
}
background.js
Ensure the background script is correctly set up.

javascript
// background.js
chrome.runtime.onInstalled.addListener(() => {
    console.log("Summy extension installed.");
});
Folder Structure
Your project should look like this:

code
summy-extension/
├── manifest.json
├── popup.html
├── popup.js
├── background.js
└── icons/
    ├── icon16.png
    ├── icon48.png
    └── icon128.png
Steps to Load the Extension
Open Chrome and go to chrome://extensions/.
Enable "Developer mode" using the toggle switch in the top right corner.
Click on "Load unpacked" and select the summy-extension folder.
This setup ensures that the chrome.tabs.executeScript function is available and correctly used to fetch the content of the active tab. If you still encounter issues, make sure that the activeTab permission is correctly declared in the manifest.json and that the extension is reloaded after making changes.


錯誤:
popup.js:41 Uncaught (in promise) TypeError: chrome.tabs.executeScript is not a function
at popup.js:41:21
at new Promise ()
at fetchPageContent (popup.js:40:12)
at HTMLButtonElement.summarizePage (popup.js:30:31)


The error you're encountering indicates that the chrome.tabs.executeScript function is not available in the context of the popup script. This can happen if the necessary permissions are not correctly set or if there are other issues with the extension setup.

Let's ensure that everything is set up correctly, including the necessary permissions and the correct usage of the chrome.tabs.executeScript API.

manifest.json
Ensure the activeTab permission is included and that the tabs permission is also declared, as it is required for executing scripts in tabs.

json
{
  "manifest_version": 3,
  "name": "Summy",
  "version": "1.0",
  "description": "A Chrome extension that uses OpenAI's API to chat, generate content, and summarize the current webpage.",
  "permissions": [
    "activeTab",
    "tabs",
    "storage"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  }
}
popup.html
No changes are needed here for this specific modification.

html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 400px;
            width: 300px;
        }
        #sidebar {
            width: 100%;
            background-color: #f4f4f4;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }
        #chat-container {
            flex-grow: 1;
            padding: 10px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            display: flex;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰"><br><br>
        <label for="model-select">選擇模型:</label>
        <select id="model-select" disabled>
            <option value="">載入中...</option>
        </select>
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script src="popup.js"></script>
</body>
</html>
popup.js
Update the fetchPageContent function to use chrome.tabs.executeScript.

javascript
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('summarize-button').addEventListener('click', summarizePage);
    document.getElementById('api-url').addEventListener('input', checkInputs);
    document.getElementById('api-key').addEventListener('input', checkInputs);
    document.getElementById('api-url').addEventListener('paste', checkInputs);
    document.getElementById('api-key').addEventListener('paste', checkInputs);

    loadSettings();
});

let chatHistory = [];

async function sendMessage() {
    const userInput = document.getElementById('user-input').value;
    if (userInput.trim() === '') return;

    appendMessage(userInput, 'user');
    document.getElementById('user-input').value = '';

    chatHistory.push({ role: "user", content: userInput });

    const response = await fetchResponse();
    appendMessage(response, 'ai');
    chatHistory.push({ role: "assistant", content: response });
}

async function summarizePage() {
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    const pageContent = await fetchPageContent(tab.id);

    if (pageContent.trim() === '') return;

    const summary = await fetchSummary(pageContent);
    appendMessage(summary, 'summary');
    chatHistory.push({ role: "assistant", content: summary });
}

async function fetchPageContent(tabId) {
    return new Promise((resolve, reject) => {
        chrome.tabs.executeScript(tabId, {
            code: 'document.body.innerText'
        }, (results) => {
            if (chrome.runtime.lastError) {
                reject(chrome.runtime.lastError);
            } else {
                resolve(results[0]);
            }
        });
    });
}

function appendMessage(message, type) {
    const chatHistoryDiv = document.getElementById('chat-history');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}-message`;
    messageElement.textContent = message;
    chatHistoryDiv.appendChild(messageElement);
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
}

async function fetchResponse() {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: chatHistory
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

async function fetchSummary(content) {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [...chatHistory, { role: "user", content: `請對以下內容進行摘要：${content}` }]
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

function checkInputs() {
    const apiUrl = document.getElementById('api-url').value.trim();
    const apiKey = document.getElementById('api-key').value.trim();

    if (apiUrl && apiKey) {
        fetchModels(apiUrl, apiKey);
        saveSettings(apiUrl, apiKey);
    } else {
        document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
        document.getElementById('model-select').disabled = true;
    }
}

async function fetchModels(apiUrl, apiKey) {
    const modelsUrl = apiUrl + '/v1/models';
    try {
        const response = await fetch(modelsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        const data = await response.json();
        populateModelSelect(data.data);
    } catch (error) {
        document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
        console.error('Error fetching models:', error);
    }
}

function populateModelSelect(models) {
    const selectElement = document.getElementById('model-select');
    selectElement.innerHTML = '';
    models.forEach(model => {
        const option = document.createElement('option');
        option.value = model.id;
        option.textContent = model.id;
        selectElement.appendChild(option);
    });
    selectElement.disabled = false;
}

async function loadSettings() {
    const settings = await chrome.storage.local.get(['apiUrl', 'apiKey']);
    if (settings.apiUrl && settings.apiKey) {
        document.getElementById('api-url').value = settings.apiUrl;
        document.getElementById('api-key').value = settings.apiKey;
        fetchModels(settings.apiUrl, settings.apiKey);
    }
}

function saveSettings(apiUrl, apiKey) {
    chrome.storage.local.set({ apiUrl, apiKey });
}
background.js
Ensure the background script is correctly set up.

javascript
// background.js
chrome.runtime.onInstalled.addListener(() => {
    console.log("Summy extension installed.");
});
Folder Structure
Your project should look like this:

code
summy-extension/
├── manifest.json
├── popup.html
├── popup.js
├── background.js
└── icons/
    ├── icon16.png
    ├── icon48.png
    └── icon128.png
Steps to Load the Extension
Open Chrome and go to chrome://extensions/.
Enable "Developer mode" using the toggle switch in the top right corner.
Click on "Load unpacked" and select the summy-extension folder.
Additional Debugging Steps
Check Console Errors: Open the popup and open the developer console (right-click on the popup and select "Inspect" or press Ctrl+Shift+I/Cmd+Option+I). Check the console for any errors.
Verify Permissions: Ensure that the activeTab and tabs permissions are correctly declared in the manifest.json.
Reload Extension: After making changes, reload the extension by clicking the refresh button next to the extension in the chrome://extensions/ page.
By ensuring the correct permissions and verifying the setup, the chrome.tabs.executeScript function should work as expected. If you continue to experience issues, please provide any additional error messages or details from the console for further assistance.


錯誤:
popup.js:41 Uncaught (in promise) TypeError: chrome.tabs.executeScript is not a function
at popup.js:41:21
at new Promise ()
at fetchPageContent (popup.js:40:12)
at HTMLButtonElement.summarizePage (popup.js:30:31)

我查到以下資訊
69

The executeScript method in ManifestV3 has changed and is now in chrome.scripting API: https://developer.chrome.com/docs/extensions/reference/scripting/

Add this line in manifest.json:

"permissions": ["scripting"]
background.js

chrome.scripting.executeScript({
target: {tabId: id, allFrames: true},
files: ['content_scripts/cscript.js'],
});
是否有幫助?


You are correct that in Manifest V3, the chrome.tabs.executeScript method has been replaced with the chrome.scripting.executeScript method. Let's update your extension to use the chrome.scripting API correctly.

manifest.json
Ensure the scripting permission is included along with activeTab and tabs.

json
{
  "manifest_version": 3,
  "name": "Summy",
  "version": "1.0",
  "description": "A Chrome extension that uses OpenAI's API to chat, generate content, and summarize the current webpage.",
  "permissions": [
    "activeTab",
    "tabs",
    "scripting",
    "storage"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  }
}
popup.html
No changes are needed here for this specific modification.

html
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Summy</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 400px;
            width: 300px;
        }
        #sidebar {
            width: 100%;
            background-color: #f4f4f4;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }
        #chat-container {
            flex-grow: 1;
            padding: 10px;
            background-color: #fff;
            overflow-y: auto;
        }
        .message {
            margin-bottom: 10px;
        }
        .user-message {
            text-align: right;
        }
        .ai-message {
            text-align: left;
        }
        .summary-message {
            text-align: left;
            font-style: italic;
        }
        #input-container {
            display: flex;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        #send-button, #summarize-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }
        #send-button:hover, #summarize-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h2>設定</h2>
        <label for="api-url">API網址:</label>
        <input type="text" id="api-url" placeholder="https://api.openai.com"><br><br>
        <label for="api-key">API金鑰:</label>
        <input type="text" id="api-key" placeholder="你的API金鑰"><br><br>
        <label for="model-select">選擇模型:</label>
        <select id="model-select" disabled>
            <option value="">載入中...</option>
        </select>
    </div>
    <div id="chat-container">
        <div id="chat-history"></div>
    </div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="輸入提示...">
        <button id="send-button">送出</button>
        <button id="summarize-button">摘要</button>
    </div>

    <script src="popup.js"></script>
</body>
</html>
popup.js
Update the fetchPageContent function to use chrome.scripting.executeScript.

javascript
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('summarize-button').addEventListener('click', summarizePage);
    document.getElementById('api-url').addEventListener('input', checkInputs);
    document.getElementById('api-key').addEventListener('input', checkInputs);
    document.getElementById('api-url').addEventListener('paste', checkInputs);
    document.getElementById('api-key').addEventListener('paste', checkInputs);

    loadSettings();
});

let chatHistory = [];

async function sendMessage() {
    const userInput = document.getElementById('user-input').value;
    if (userInput.trim() === '') return;

    appendMessage(userInput, 'user');
    document.getElementById('user-input').value = '';

    chatHistory.push({ role: "user", content: userInput });

    const response = await fetchResponse();
    appendMessage(response, 'ai');
    chatHistory.push({ role: "assistant", content: response });
}

async function summarizePage() {
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    const pageContent = await fetchPageContent(tab.id);

    if (pageContent.trim() === '') return;

    const summary = await fetchSummary(pageContent);
    appendMessage(summary, 'summary');
    chatHistory.push({ role: "assistant", content: summary });
}

async function fetchPageContent(tabId) {
    return new Promise((resolve, reject) => {
        chrome.scripting.executeScript({
            target: { tabId: tabId },
            func: () => document.body.innerText
        }, (results) => {
            if (chrome.runtime.lastError) {
                reject(chrome.runtime.lastError);
            } else {
                resolve(results[0].result);
            }
        });
    });
}

function appendMessage(message, type) {
    const chatHistoryDiv = document.getElementById('chat-history');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}-message`;
    messageElement.textContent = message;
    chatHistoryDiv.appendChild(messageElement);
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
}

async function fetchResponse() {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: chatHistory
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

async function fetchSummary(content) {
    const apiUrl = document.getElementById('api-url').value + '/v1/chat/completions';
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [...chatHistory, { role: "user", content: `請對以下內容進行摘要：${content}` }]
        })
    });

    const data = await response.json();
    return data.choices[0].message.content;
}

function checkInputs() {
    const apiUrl = document.getElementById('api-url').value.trim();
    const apiKey = document.getElementById('api-key').value.trim();

    if (apiUrl && apiKey) {
        fetchModels(apiUrl, apiKey);
        saveSettings(apiUrl, apiKey);
    } else {
        document.getElementById('model-select').innerHTML = '<option value="">請填入API網址和金鑰</option>';
        document.getElementById('model-select').disabled = true;
    }
}

async function fetchModels(apiUrl, apiKey) {
    const modelsUrl = apiUrl + '/v1/models';
    try {
        const response = await fetch(modelsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`
            }
        });

        const data = await response.json();
        populateModelSelect(data.data);
    } catch (error) {
        document.getElementById('model-select').innerHTML = '<option value="">無法載入模型</option>';
        console.error('Error fetching models:', error);
    }
}

function populateModelSelect(models) {
    const selectElement = document.getElementById('model-select');
    selectElement.innerHTML = '';
    models.forEach(model => {
        const option = document.createElement('option');
        option.value = model.id;
        option.textContent = model.id;
        selectElement.appendChild(option);
    });
    selectElement.disabled = false;
}

async function loadSettings() {
    const settings = await chrome.storage.local.get(['apiUrl', 'apiKey']);
    if (settings.apiUrl && settings.apiKey) {
        document.getElementById('api-url').value = settings.apiUrl;
        document.getElementById('api-key').value = settings.apiKey;
        fetchModels(settings.apiUrl, settings.apiKey);
    }
}

function saveSettings(apiUrl, apiKey) {
    chrome.storage.local.set({ apiUrl, apiKey });
}
background.js
Ensure the background script is correctly set up.

javascript
// background.js
chrome.runtime.onInstalled.addListener(() => {
    console.log("Summy extension installed.");
});
Folder Structure
Your project should look like this:

code
summy-extension/
├── manifest.json
├── popup.html
├── popup.js
├── background.js
└── icons/
    ├── icon16.png
    ├── icon48.png
    └── icon128.png
Steps to Load the Extension
Open Chrome and go to chrome://extensions/.
Enable "Developer mode" using the toggle switch in the top right corner.
Click on "Load unpacked" and select the summy-extension folder.
Additional Debugging Steps
Check Console Errors: Open the popup and open the developer console (right-click on the popup and select "Inspect" or press Ctrl+Shift+I/Cmd+Option+I). Check the console for any errors.
Verify Permissions: Ensure that the activeTab, tabs, scripting, and storage permissions are correctly declared in the manifest.json.
Reload Extension: After making changes, reload the extension by clicking the refresh button next to the extension in the chrome://extensions/ page.
By ensuring the correct permissions and using the chrome.scripting.executeScript method, the extension should now correctly fetch the content of the active tab and summarize it. If you continue to experience issues, please provide any additional error messages or details from the console for further assistance.